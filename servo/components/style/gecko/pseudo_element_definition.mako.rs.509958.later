--- pseudo_element_definition.mako.rs
+++ pseudo_element_definition.mako.rs
@@ -211,34 +211,34 @@ impl PseudoElement {
                 if atom == &atom!("${pseudo.value}") {
                     return Some(PseudoElement::${pseudo.capitalized()}(args));
                 }
             % endif
         % endfor
         None
     }
 
-    /// Constructs an atom from a string of text, and whether we're in a
-    /// user-agent stylesheet.
-    ///
-    /// If we're not in a user-agent stylesheet, we will never parse anonymous
-    /// box pseudo-elements.
+    /// Constructs a pseudo-element from a string of text.
     ///
     /// Returns `None` if the pseudo-element is not recognised.
     #[inline]
     pub fn from_slice(name: &str) -> Option<Self> {
         // We don't need to support tree pseudos because functional
         // pseudo-elements needs arguments, and thus should be created
         // via other methods.
         match_ignore_ascii_case! { name,
             % for pseudo in SIMPLE_PSEUDOS:
             "${pseudo.value[1:]}" => {
                 return Some(${pseudo_element_variant(pseudo)})
             }
             % endfor
+            // Alias "-moz-selection" to "selection" at parse time.
+            "-moz-selection" => {
+                return Some(PseudoElement::Selection);
+            }
             _ => {
                 // FIXME: -moz-tree check should probably be
                 // ascii-case-insensitive.
                 if name.starts_with("-moz-tree-") {
                     return PseudoElement::tree_pseudo_element(name, Box::new([]))
                 }
             }
         }
