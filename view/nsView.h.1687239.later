--- nsView.h
+++ nsView.h
@@ -32,40 +32,38 @@ class PresShell;
  * its parent document frame tree. Historically views were used for more things,
  * but their role has been reduced, and could be reduced to nothing in the
  * future (bug 337801 tracks removing views). Views are generally associated
  * with a frame. A view that does not have a frame is called an anonymous view.
  * Some frames also have associated widgets (think os level windows). If a frame
  * has a widget it must also have a view, but not all frames with views will
  * have widgets.
  *
- * Only five types of frames can have a view: root frames (ViewportFrame),
- * subdocument frames (nsSubDocumentFrame), plugin frames (nsPluginFrame),
+ * Only four types of frames can have a view: root frames (ViewportFrame),
+ * subdocument frames (nsSubDocumentFrame),
  * menu popup frames (nsMenuPopupFrame), and list control frames
  * (nsListControlFrame). Root frames and subdocument frames have views to link
  * the two documents together (the frame trees do not link up otherwise).
- * Plugin frames, menu popup frames, and list control frames have views because
- * they (sometimes) need to create widgets (although plugins with widgets might
- * be going away/gone?). Menu popup frames handles xul popups, which is anything
+ * Menu popup frames, and list control frames have views because
+ * they (sometimes) need to create widgets.
+ * Menu popup frames handles xul popups, which is anything
  * where we need content to go over top the main window at an os level. List
  * control frames handle select popups/dropdowns in non-e10s mode.
  *
  * The term "root view" refers to the root view of a document. Just like root
  * frames, root views can have parent views. Only the root view of the root
  * document in the process will not have a parent.
  *
  * All views are created by their frames except root views. Root views are
  * special. Root views are created in nsDocumentViewer::MakeWindow before the
  * root frame is created, so the root view will not have a frame very early in
  * document creation.
  *
- * Subdocument frames and plugin frames have an anonymous (no frame associated
- * with it) inner view that is a child of their "outer" view. On a plugin frame
- * with a widget the inner view would be associated with the widget (as opposed
- * to the outer view).
+ * Subdocument frames have an anonymous (no frame associated
+ * with it) inner view that is a child of their "outer" view.
  *
  * On a subdocument frame the inner view serves as the parent of the
  * root view of the subdocument. The outer and inner view of the subdocument
  * frame belong to the subdocument frame and hence to the parent document. The
  * root view of the subdocument belongs to the subdocument.
  * nsLayoutUtils::GetCrossDocParentFrame and nsPresContext::GetParentPresContext
  * depend on this view structure and are the main way that we traverse across
  * the document boundary in layout.
