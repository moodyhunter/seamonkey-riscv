--- nsDisplayList.cpp
+++ nsDisplayList.cpp
@@ -150,19 +150,18 @@ void AssertUniqueItem(nsDisplayItem* aIt
         continue;
       }
       MOZ_DIAGNOSTIC_ASSERT(false, "Duplicate display item!");
     }
   }
 }
 #endif
 
-bool ShouldBuildItemForEventsOrPlugins(const DisplayItemType aType) {
+bool ShouldBuildItemForEvents(const DisplayItemType aType) {
   return aType == DisplayItemType::TYPE_COMPOSITOR_HITTEST_INFO ||
-         aType == DisplayItemType::TYPE_PLUGIN ||
          (GetDisplayItemFlagsForType(aType) & TYPE_IS_CONTAINER);
 }
 
 void UpdateDisplayItemData(nsPaintedDisplayItem* aItem) {
   for (mozilla::DisplayItemData* did : aItem->Frame()->DisplayItemData()) {
     if (did->GetDisplayItemKey() == aItem->GetPerFrameKey() &&
         did->GetLayer()->AsPaintedLayer()) {
       if (!did->HasMergedFrames()) {
@@ -584,28 +583,28 @@ nsDisplayListBuilder::nsDisplayListBuild
       mBuildCaret(aBuildCaret),
       mRetainingDisplayList(aRetainingDisplayList),
       mPartialUpdate(false),
       mIgnoreSuppression(false),
       mIncludeAllOutOfFlows(false),
       mDescendIntoSubdocuments(true),
       mSelectedFramesOnly(false),
       mAllowMergingAndFlattening(true),
       mWillComputePluginGeometry(false),
       mInTransform(false),
-      mInEventsAndPluginsOnly(false),
+      mInEventsOnly(false),
       mInFilter(false),
       mInPageSequence(false),
       mIsInChromePresContext(false),
       mSyncDecodeImages(false),
       mIsPaintingToWindow(false),
       mUseHighQualityScaling(false),
       mIsPaintingForWebRender(false),
       mIsCompositingCheap(false),
       mContainsPluginItem(false),
       mAncestorHasApzAwareEventHandler(false),
       mHaveScrollableDisplayPort(false),
       mWindowDraggingAllowed(false),
       mIsBuildingForPopup(nsLayoutUtils::IsPopup(aReferenceFrame)),
       mForceLayerForScrollParent(false),
       mAsyncPanZoomEnabled(nsLayoutUtils::AsyncPanZoomEnabled(aReferenceFrame)),
       mBuildingInvisibleItems(false),
       mIsBuilding(false),
@@ -2477,29 +2456,16 @@ already_AddRefed<LayerManager> nsDisplay
     MaybeSetupTransactionIdAllocator(layerManager, presContext);
 
     bool sent = false;
     if (aFlags & PAINT_IDENTICAL_DISPLAY_LIST) {
       sent = layerManager->EndEmptyTransaction();
     }
 
     if (!sent) {
-      // Windowed plugins are not supported with WebRender enabled.
-      // But PluginGeometry needs to be updated to show plugin.
-      // Windowed plugins are going to be removed by Bug 1296400.
-      nsRootPresContext* rootPresContext = presContext->GetRootPresContext();
-      if (rootPresContext && XRE_IsContentProcess()) {
-        if (aBuilder->WillComputePluginGeometry()) {
-          rootPresContext->ComputePluginGeometryUpdates(
-              aBuilder->RootReferenceFrame(), aBuilder, this);
-        }
-        // This must be called even if PluginGeometryUpdates were not computed.
-        rootPresContext->CollectPluginGeometryUpdates(layerManager);
-      }
-
       auto* wrManager = static_cast<WebRenderLayerManager*>(layerManager.get());
 
       nsIDocShell* docShell = presContext->GetDocShell();
       WrFiltersHolder wrFilters;
       gfx::Matrix5x4* colorMatrix =
           nsDocShell::Cast(docShell)->GetColorMatrix();
       if (colorMatrix) {
         wrFilters.filters.AppendElement(
