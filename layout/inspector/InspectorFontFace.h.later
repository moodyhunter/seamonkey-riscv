--- InspectorFontFace.h
+++ InspectorFontFace.h
@@ -6,47 +6,49 @@
 
 #ifndef mozilla_InspectorFontFace_h
 #define mozilla_InspectorFontFace_h
 
 #include "mozilla/ServoFontFaceRule.h"
 #include "mozilla/dom/InspectorUtilsBinding.h"
 #include "mozilla/dom/NonRefcountedDOMObject.h"
 #include "nsRange.h"
+#include "gfxFont.h"
 
-class gfxFontEntry;
 class gfxFontGroup;
 
 namespace mozilla {
 namespace dom {
 
 /**
  * Information on font face usage by a given DOM Range, as returned by
  * InspectorUtils.getUsedFontFaces.
  */
 class InspectorFontFace final : public NonRefcountedDOMObject
 {
 public:
   InspectorFontFace(gfxFontEntry* aFontEntry,
                     gfxFontGroup* aFontGroup,
-                    uint8_t aMatchType)
+                    gfxTextRange::MatchType aMatchType)
     : mFontEntry(aFontEntry)
     , mFontGroup(aFontGroup)
     , mMatchType(aMatchType)
   {
     MOZ_COUNT_CTOR(InspectorFontFace);
   }
 
   ~InspectorFontFace()
   {
     MOZ_COUNT_DTOR(InspectorFontFace);
   }
 
   gfxFontEntry* GetFontEntry() const { return mFontEntry; }
-  void AddMatchType(uint8_t aMatchType) { mMatchType |= aMatchType; }
+  void AddMatchType(gfxTextRange::MatchType aMatchType) {
+    mMatchType |= aMatchType;
+  }
 
   void AddRange(nsRange* aRange);
   size_t RangeCount() const {
     return mRanges.Length();
   }
 
   // Web IDL
   bool FromFontGroup();
@@ -76,17 +78,17 @@ public:
   {
     return InspectorFontFaceBinding::Wrap(aCx, this, aGivenProto, aReflector);
   }
 
 protected:
   RefPtr<gfxFontEntry> mFontEntry;
   RefPtr<gfxFontGroup> mFontGroup;
   RefPtr<ServoFontFaceRule> mRule;
-  uint8_t mMatchType;
+  gfxTextRange::MatchType mMatchType;
 
   nsTArray<RefPtr<nsRange>> mRanges;
 };
 
 } // namespace dom
 } // namespace mozilla
 
 #endif // mozilla_InspectorFontFace_h
