--- genpgocert.py
+++ genpgocert.py
@@ -9,17 +9,16 @@
 
 import mozinfo
 import os
 import random
 import re
 import shutil
 import subprocess
 import sys
-import tempfile
 import distutils
 
 from mozbuild.base import MozbuildObject
 from mozfile import NamedTemporaryFile, TemporaryDirectory
 from mozprofile.permissions import ServerLocations
 
 dbFiles = [
     re.compile("^cert[0-9]+\.db$"),
@@ -76,33 +75,31 @@ def writeCertspecForServerLocations(fd):
         customCertRE = re.compile("^cert=(?:\w+)")
         for _ in [i for i in loc.options if customCertRE.match(i)]:
             customCertOption = True
             break
 
         if not customCertOption:
             SAN.append(loc.host)
 
-    fd.write("issuer:printableString/CN=Temporary Certificate Authority/O=Mozilla Testing/OU=Profile Guided Optimization\n")
+    fd.write("issuer:printableString/CN=Temporary Certificate Authority/O=Mozilla Testing/OU=Profile Guided Optimization\n")  # NOQA: E501
     fd.write("subject:{}\n".format(SAN[0]))
     fd.write("extension:subjectAlternativeName:{}\n".format(",".join(SAN)))
 
 
 def constructCertDatabase(build, srcDir):
     certutil = build.get_binary_path(what="certutil")
     pk12util = build.get_binary_path(what="pk12util")
     openssl = distutils.spawn.find_executable("openssl")
     pycert = os.path.join(build.topsrcdir, "security", "manager", "ssl", "tests",
                           "unit", "pycert.py")
     pykey = os.path.join(build.topsrcdir, "security", "manager", "ssl", "tests",
                          "unit", "pykey.py")
 
-    with NamedTemporaryFile() as pwfile, NamedTemporaryFile() as rndfile, TemporaryDirectory() as pemfolder:
-        pgoCAPath = os.path.join(srcDir, "pgoca.p12")
-
+    with NamedTemporaryFile() as pwfile, TemporaryDirectory() as pemfolder:
         pwfile.write("\n")
         pwfile.flush()
 
         if dbFilesExist(srcDir):
             # Make sure all DB files from src are really deleted
             unlinkDbFiles(srcDir)
 
         # Copy  all .certspec and .keyspec files to a temporary directory
@@ -131,49 +128,54 @@ def constructCertDatabase(build, srcDir)
                     certspec_data = certspec_file.read()
                     with open(pem, "w") as pem_file:
                         status = runUtil(
                             pycert, [], inputdata=certspec_data, outputstream=pem_file)
                         if status:
                             return status
 
                 status = runUtil(certutil, [
-                                 "-A", "-n", name, "-t", "P,,", "-i", pem, "-d", srcDir, "-f", pwfile.name])
+                                 "-A", "-n", name, "-t", "P,,", "-i", pem,
+                                 "-d", srcDir, "-f", pwfile.name
+                                 ])
                 if status:
                     return status
 
             for keyspec in [i for i in files if i.endswith(".keyspec")]:
                 parts = keyspec.split(".")
                 name = parts[0]
                 key_type = parts[1]
                 if key_type not in ["ca", "client", "server"]:
-                    raise Exception("{}: keyspec filenames must be of the form XXX.client.keyspec or XXX.ca.keyspec (key_type={})".format(
-                        keyspec, key_type))
+                    raise Exception("{}: keyspec filenames must be of the form XXX.client.keyspec "
+                                    "or XXX.ca.keyspec (key_type={})".format(
+                                        keyspec, key_type))
                 key_pem = os.path.join(pemfolder, "{}.key.pem".format(name))
 
                 print("Generating private key {} (pem={})".format(name, key_pem))
 
                 with open(os.path.join(root, keyspec), "r") as keyspec_file:
                     keyspec_data = keyspec_file.read()
                     with open(key_pem, "w") as pem_file:
                         status = runUtil(
                             pykey, [], inputdata=keyspec_data, outputstream=pem_file)
                         if status:
                             return status
 
                 cert_pem = os.path.join(pemfolder, "{}.cert.pem".format(name))
                 if not os.path.exists(cert_pem):
-                    raise Exception("There has to be a corresponding certificate named {} for the keyspec {}".format(
-                        cert_pem, keyspec))
+                    raise Exception("There has to be a corresponding certificate named {} for "
+                                    "the keyspec {}".format(
+                                        cert_pem, keyspec))
 
                 p12 = os.path.join(pemfolder, "{}.key.p12".format(name))
                 print("Converting private key {} to PKCS12 (p12={})".format(
                     key_pem, p12))
                 status = runUtil(openssl, ["pkcs12", "-export", "-inkey", key_pem, "-in",
-                                           cert_pem, "-name", name, "-out", p12, "-passout", "file:"+pwfile.name])
+                                           cert_pem, "-name", name, "-out", p12, "-passout",
+                                           "file:"+pwfile.name])
                 if status:
                     return status
 
                 print("Importing private key {} to database".format(key_pem))
                 status = runUtil(
                     pk12util, ["-i", p12, "-d", srcDir, "-w", pwfile.name, "-k", pwfile.name])
                 if status:
                     return status
@@ -192,10 +194,10 @@ def constructCertDatabase(build, srcDir)
 
     return 0
 
 
 build = MozbuildObject.from_environment()
 certdir = os.path.join(build.topsrcdir, "build", "pgo", "certs")
 certificateStatus = constructCertDatabase(build, certdir)
 if certificateStatus:
-    print "TEST-UNEXPECTED-FAIL | SSL Server Certificate generation"
+    print("TEST-UNEXPECTED-FAIL | SSL Server Certificate generation")
 sys.exit(certificateStatus)
