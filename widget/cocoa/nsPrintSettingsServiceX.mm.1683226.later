--- nsPrintSettingsServiceX.mm
+++ nsPrintSettingsServiceX.mm
@@ -1,15 +1,17 @@
 /* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 #include "nsPrintSettingsServiceX.h"
 
+#include "mozilla/Debug.h"
+#include "mozilla/Unused.h"
 #include "nsCOMPtr.h"
 #include "nsQueryObject.h"
 #include "nsPrintSettingsX.h"
 #include "nsCocoaUtils.h"
 
 using namespace mozilla::embedding;
 
 NS_IMETHODIMP
@@ -46,27 +48,27 @@ nsPrintSettingsServiceX::DeserializeToPr
   settingsX->SetDisposition(data.disposition());
   settingsX->SetDestination(data.destination());
 
   return NS_OK;
 }
 
 nsresult nsPrintSettingsServiceX::ReadPrefs(nsIPrintSettings* aPS, const nsAString& aPrinterName,
                                             uint32_t aFlags) {
-  DebugOnly<nsresult> rv = nsPrintSettingsService::ReadPrefs(aPS, aPrinterName, aFlags);
+  mozilla::DebugOnly<nsresult> rv = nsPrintSettingsService::ReadPrefs(aPS, aPrinterName, aFlags);
   NS_ASSERTION(NS_SUCCEEDED(rv), "nsPrintSettingsService::ReadPrefs() failed");
 
   RefPtr<nsPrintSettingsX> printSettingsX(do_QueryObject(aPS));
   if (!printSettingsX) {
     return NS_ERROR_NO_INTERFACE;
   }
 
   // ReadPageFormatFromPrefs may fail (e.g. prefs are missing/broken) but we can
   // safely ignore that and just leave existing/default values in the settings.
-  Unused << printSettingsX->ReadPageFormatFromPrefs();
+  mozilla::Unused << printSettingsX->ReadPageFormatFromPrefs();
 
   return NS_OK;
 }
 
 nsresult nsPrintSettingsServiceX::_CreatePrintSettings(nsIPrintSettings** _retval) {
   nsresult rv;
   *_retval = nullptr;
 
